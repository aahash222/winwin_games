export default {
  data() {
    return {
      rouletteChips: [
        0.00000001,
        0.00000010,
        0.00000100,
        0.00001000,
        0.00010000,
        0.00100000,
        0.01000000,
        0.10000000,
        1.00000000,
        10.0000000,
        100.000000,
        1000.00000,
        10000.0000
      ],
      rouletteNumbers: [33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26, 0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16],
      roulettePlaces: [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34],
      rouletteColors: [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1],
      rouletteColorsCode: ['black', 'red', 'green'],

      rouletteCombinations: {
        column: {
          0: [3, 2, 1],
          1: [6, 5, 4],
          2: [9, 8, 7],
          3: [12, 11, 10],
          4: [15, 14, 13],
          5: [18, 17, 16],
          6: [21, 20, 19],
          7: [24, 23, 22],
          8: [27, 26, 25],
          9: [30, 29, 28],
          10: [33, 32, 31],
          11: [36, 35, 34],
          12: [3, 2],
          13: [6, 5],
          14: [9, 8],
          15: [12, 11],
          16: [15, 14],
          17: [18, 17],
          18: [21, 20],
          19: [24, 23],
          20: [27, 26],
          21: [30, 29],
          22: [33, 32],
          23: [36, 35],
          24: [2, 1],
          25: [5, 4],
          26: [8, 7],
          27: [11, 10],
          28: [14, 13],
          29: [17, 16],
          30: [20, 19],
          31: [23, 22],
          32: [26, 25],
          33: [29, 28],
          34: [32, 31],
          35: [35, 34],
        },
        center: {
          0: [0, 3, 2, 1],
          1: [3, 2, 1, 6, 5, 4],
          2: [6, 5, 4, 9, 8, 7],
          3: [9, 8, 7, 12, 11, 10],
          4: [12, 11, 10, 15, 14, 13],
          5: [15, 14, 13, 18, 17, 16],
          6: [18, 17, 16, 21, 20, 19],
          7: [21, 20, 19, 24, 23, 22],
          8: [24, 23, 22, 27, 26, 25],
          9: [27, 26, 25, 30, 29, 28],
          10: [30, 29, 28, 33, 32, 31],
          11: [33, 32, 31, 36, 35, 34],
          12: [0, 3, 2],
          13: [3, 2, 6, 5],
          14: [6, 5, 9, 8],
          15: [9, 8, 12, 11],
          16: [12, 11, 15, 14],
          17: [15, 14, 18, 17],
          18: [18, 17, 21, 20],
          19: [21, 20, 24, 23],
          20: [24, 23, 27, 26],
          21: [27, 26, 30, 29],
          22: [30, 29, 33, 32],
          23: [33, 32, 36, 35],
          24: [0, 2, 1],
          25: [2, 1, 5, 4],
          26: [5, 4, 8, 7],
          27: [8, 7, 11, 10],
          28: [11, 10, 14, 13],
          29: [14, 13, 17, 16],
          30: [17, 16, 20, 19],
          31: [20, 19, 23, 22],
          32: [23, 22, 26, 25],
          33: [26, 25, 29, 28],
          34: [29, 28, 32, 31],
          35: [32, 31, 35, 34],
        },
        row: {
          0: [0, 3],
          1: [3, 6],
          2: [6, 9],
          3: [9, 12],
          4: [12, 15],
          5: [15, 18],
          6: [18, 21],
          7: [21, 24],
          8: [24, 27],
          9: [27, 30],
          10: [30, 33],
          11: [33, 36],
          12: [0, 2],
          13: [2, 5],
          14: [5, 8],
          15: [8, 11],
          16: [11, 14],
          17: [14, 17],
          18: [17, 20],
          19: [20, 23],
          20: [23, 26],
          21: [26, 29],
          22: [29, 32],
          23: [32, 35],
          24: [0, 1],
          25: [1, 4],
          26: [4, 7],
          27: [7, 10],
          28: [10, 13],
          29: [13, 16],
          30: [16, 19],
          31: [19, 22],
          32: [22, 25],
          33: [25, 28],
          34: [28, 31],
          35: [31, 34],

        },
        combo: {
          0: [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36],
          1: [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35],
          2: [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34],
          3: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          4: [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
          5: [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36],
          6: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
          7: [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36],
          8: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36],
          9: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35],
          10: [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36],
          11: [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35],
        }
      },
    }
  },
  methods: {
    getColorCode: function(value) {
      if (value === 0) return this.rouletteColorsCode[2]
      return this.rouletteColorsCode[this.rouletteColors[this.roulettePlaces.indexOf(value)]]
    },
    getPlaceName: function(key) {
      const names = key.split('_')

      if (names[0] === 'one') return names[1]

      if (names[0] === 'combo') {
        switch (parseInt(names[1])) {
          case 0: case 1: case 2:
            return '2:1'
          case 3:
            return '1 to 12'
          case 4:
            return '13 to 24'
          case 5:
            return '25 to 36'
          case 6:
            return '1 to 18'
          case 7:
            return '19 to 36'
          case 8:
            return 'even'
          case 9:
            return 'odd'
          case 10:
            return 'red'
          case 11:
            return 'blue'
        }
      }

      if (this.rouletteCombinations[names[0]][parseInt(names[1])].length === 6) {
        const data = this.getPlaceNamesArray(names)
        return data[0] + ' - ' + data[5]
      }

      let text = ''
      for (let i = 0; i < this.rouletteCombinations[names[0]][parseInt(names[1])].length; i++) {
        const data = this.getPlaceNamesArray(names)
        text += data[i] + ','
      }

      return text.slice(0, -1)
    },
    getPlaceNamesArray: function(names) {
      const data = []
      for (let i = 0; i < this.rouletteCombinations[names[0]][parseInt(names[1])].length; i++) {
        data.push(this.rouletteCombinations[names[0]][parseInt(names[1])][i])
      }
      return data.sort()
    }
  }
}
